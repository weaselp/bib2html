#!/usr/bin/perl

# convert bibtex files to html

# Copyright (c) 2014, 2015 Peter Palfrader <peter@palfrader.org>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use English;
use File::Path;
use File::Temp;
use Text::BibTeX;
use HTML::Entities;
use Getopt::Long;
use Cwd qw{abs_path getcwd};
use File::Basename;
use Template;

use File::Spec::Functions qw( catpath splitpath);
use lib catpath( ( splitpath( abs_path $0 ) )[ 0, 1 ] );
use t2h;

my $program_dir_path = dirname(abs_path($0));

package Item;

sub new {
    my ($class, $bibentry) = @_;
    my $self = {'bibentry' => $bibentry};
    bless $self, $class;
    $self;
}

sub exists {
    my ($self, $field) = @_;
    return 1 if $self->{'bibentry'}->exists($field);
    return 1 if grep {$_ eq $field} qw{f_authors f_atitle};
    return 0;
}

sub get_plain {
    my ($self, $field) = @_;

    return $self->{'bibentry'}->get($field)
        if ($self->{'bibentry'}->exists($field));

    if ($field eq 'f_authors') {
        return $self->{'bibentry'}->format_authors;
    } elsif ($field eq 'f_atitle') {
        return $self->{'bibentry'}->format_atitle;
    }
    return undef;
}

sub get {
    my ($self, $field) = @_;
    my $value = $self->get_plain($field);

    return ::tex_to_html($value);
}

sub key { return shift->{'bibentry'}->key; }
sub type { return shift->{'bibentry'}->type; }

sub print_s {
    my ($self) = @_;
    my $be = $self->{'bibentry'};
    my $clone = Text::BibTeX::Entry->new;

    $clone->set_metatype(&Text::BibTeX::BTE_REGULAR);
    $clone->set_type($be->type);
    $clone->set_key($be->key);
    for my $k ($be->fieldlist) {
        $clone->set($k, $be->get($k));
    }

    $clone->delete(qw{owner timestamp www_links www_selected www_note www_year www_month file abstract});
    my $s = $clone->print_s;
    $s =~ s/\n*$//;
    return $s;
}

package main;

use constant BIBFILENAME => 'b2h.bib';
my $MONTH2NUMBER = {
                'January'   => '01',
                'February'  => '02',
                'March'     => '03',
                'April'     => '04',
                'May'       => '05',
                'June'      => '06',
                'July'      => '07',
                'August'    => '08',
                'September' => '09',
                'October'   => '10',
                'November'  => '11',
                'December'  => '12' };

sub htmlize {
    my ($txt) = @_;

    return encode_entities($txt, '<>&');
}

# Run BibTeX to create a .bbl file that has LaTeX formatted bibliography items
sub create_bbl {
    my ($bibkeys) = @_;
    open F, ">", 'dummy.aux' or die ("Cannot open aux file for output: $!\n");
    print F "\\bibstyle{plain}\n\\bibdata{b2h}\n";
    print F "\\citation{$_}\n" for (@$bibkeys);
    close F;

    open(my $oldout, ">&STDOUT") or die "Can't dup STDOUT: $!\n";
    open(STDOUT, '>', "/dev/null") or die "Can't redirect STDOUT: $!\n";

    system(qw{bibtex dummy}) == 0 or die "bibtex run failed: $?\n";

    open(STDOUT, ">&", $oldout) or die "Can't dup \$oldout: $!";
    close($oldout);
}

sub trim($) {
    my ($s) = @_;
    $s =~ s/^\s*//;
    $s =~ s/\.?\s*$//;
    return $s;
}

sub sanitize_key($) {
    my ($k) = @_;

    $k =~ s/[^-A-Za-z0-9_]/_/g;
    $k =~ s/^/bib-/;
    return $k;
}

# load the LaTeX formatted bibliography items produced by BibTeX,
# split them into tokens (ahtors, title, etc.) and convert them to HTML.
#
# returns a hash of bibiliography items, each of which is a hash with keys such
# as title or authors.
sub tex_format_bibs {
    my ($bibkeys) = @_;
    create_bbl($bibkeys);

    my $bblitems = {};
    open F, "<", 'dummy.bbl' or die ("Cannot open bbl file for input: $!\n");
    {
        local $/="";
        while (<F>) {
            if (/^\\begin\{thebibliography\}/) {
                next;
            } elsif (/^\\bibitem(?:\[.*?\])?\{(.*)\}/) {
                $bblitems->{$1} = $_;
            } elsif (/^\\end\{thebibliography\}/) {
                last;
            } else {
                warn("Unexpected token in bbl: $_\n");
            }
        };
    };
    my $formatted = {};
    for my $k (keys %$bblitems) {
        my @tokens = split /\\newblock/, $bblitems->{$k};
        if (scalar @tokens >= 2) {
            my $t1 = shift @tokens;
            my $t2 = shift @tokens;
            my ($bibkey, $authors) = split(/\n/, $t1, 2);

            $formatted->{$k} = {
                anchor  => sanitize_key($k),
                bibkey  => trim(tex_to_html($k)),
                title   => trim(tex_to_html($t2)),
                authors => trim(tex_to_html($authors)),
                info    => trim(tex_to_html(join('\newblock', @tokens))),
            }
        }
    }
    return $formatted;
}

# Add additional information to bibliography items that was not included byb
# BibTeX, such as www links, dois, or abstract.
#
# Adds the additional info to the hash referenced in $target.  $entry is
# an object of class Item (see above) created from the corresponding
# Text::BibTeX::Entry object.
sub entry_add_extra_info($$) {
    my ($target, $entry) = @_;

    my $bibtexkey = $entry->key;

    my $type = $entry->type;
    my $idbibkey = sanitize_key($bibtexkey);

    $target->{'type'} = $type;

    my @misc;
    if ($entry->exists('www_links')) {
        for my $line (split /\s*\|\s*/, $entry->get_plain('www_links')) {
            my $entry = {};
            my ($desc, $link) = ($line =~ /^((?:\\.|[^\\:])*):(.*)$/);
            if ($desc eq "raw") {
                $entry->{'raw'} = $link;
            } elsif ($link ne '') {
                $desc =~ s/\\(.)/$1/g;
                $entry->{'href'} = trim(tex_to_html($link));
                $entry->{'label'} = trim(tex_to_html($desc));
            } else {
                warn("Undefined link for $desc in $bibtexkey.\n");
                next;
            }
            push @misc, $entry;
        }
    };

    my $www_note;
    if ($entry->exists('www_note')) {
        my ($type, $content) = ($entry->get_plain('www_note') =~ /^([^\\:]*):\s*(.*)\s*$/);
        if ($type eq "raw") {
            $www_note = $content;
        } elsif ($type eq 'tex') {
            $www_note = trim(tex_to_html($content));
        } else {
            warn("www_note is note of type tex or raw in $bibtexkey.\n");
        }
    }

    $target->{'abstract'} = $entry->get('abstract') if ($entry->exists('abstract'));
    $target->{'doi'} = $entry->get_plain('doi') if ($entry->exists('doi'));
    $target->{'misc'} = \@misc if (scalar @misc);
    $target->{'bibtex'} = htmlize($entry->print_s());
    $target->{'www_note'} = $www_note if (defined $www_note);
};

sub setup_bib {
    my ($tmpdir) = @_;

    open BIB, '>', $tmpdir."/".BIBFILENAME or die $!;
    print BIB while (<>);
    close BIB;
}

sub open_bib {
    my $b = new Text::BibTeX::File;
    $b->open(BIBFILENAME) or die "Cannot load bibfile: $!\n";
    $b->set_structure('Bib');
    return $b;
};

# load information about all bibliography entries, running bibtex, parsing
# its output and extendeding the information as required
sub prepare_entries {
    my ($params) = @_;

    my $bib = open_bib();
    my @bibkeys;
    my %bibitems;

    while (my $entry = new Text::BibTeX::Entry $bib) {
        $entry->print(*STDERR) if $params->{'verbose'};
        next unless $entry->parse_ok && $entry->metatype == BTE_REGULAR;
        my $i = new Item($entry);

        $bibitems{$i->key} = $i;

        my $is_selected = $i->exists('www_selected') && $i->get_plain('www_selected');
        if ($params->{'all'} || $is_selected) {
            push @bibkeys, $i->key;
        }
    };

    if (scalar @bibkeys == 0) {
        if (!$params->{'all'} && (scalar keys %bibitems > 0)) {
            warn("No bibentries selected - including all...\n");
            @bibkeys = keys %bibitems;
        } else {
            die("No bibentries selected!\n");
        }
    }
    my $bblinfo = tex_format_bibs(\@bibkeys);

    for my $bibkey (@bibkeys) {
        unless (exists $bblinfo->{$bibkey}) {
            warn ("Bibtex key $bibkey does not exist in .bbl file\n");
            next;
        }
        my $bi = $bblinfo->{$bibkey};
        my $i = $bibitems{$bibkey};


        my $year = $i->exists('www_year') ? $i->get_plain('www_year') :
                   $i->exists('year') ? $i->get_plain('year') :
                   0;
        my $month = 0;
        $month = $MONTH2NUMBER->{$i->get_plain('www_month')} || $i->get_plain('www_month')if (!$month and $i->exists('www_month'));
        $month = $MONTH2NUMBER->{$i->get_plain(    'month')} || $i->get_plain(    'month')if (!$month and $i->exists(    'month'));

        $bi->{'year'} = $year;
        $bi->{'sort1'} = sprintf("%d-%s", $year, $month);
        $bi->{'sort2'} = $bibkey;

        entry_add_extra_info($bi, $i);
    }

    return $bblinfo;
}


my $params = {
  'css-template' => $program_dir_path."/templates/tmpl.css",
  'js-template'  => $program_dir_path."/templates/tmpl.js",
  'template'     => $program_dir_path."/templates/tmpl.html",
};
Getopt::Long::config('bundling');
if (!GetOptions (
    'help|h'         =>  \$params->{'help'},
    'debug'          =>  \$params->{'debug'},
    'verbose'        =>  \$params->{'verbose'},
    'all'            =>  \$params->{'all'},
    'no-frame'       =>  \$params->{'no-frame'},
    'no-base-css'    =>  \$params->{'no-base-css'},
    'ext-css=s'      =>  \$params->{'ext-css'},
    'ext-js=s'       =>  \$params->{'ext-js'},
    'css-template=s' =>  \$params->{'css-template'},
    'template=s'     =>  \$params->{'template'},
    )) {
    die "$PROGRAM_NAME: Usage: $PROGRAM_NAME [options] <bibfile> [<bibfile> ..]\n";
};

if ($params->{'help'}) {
    print "$PROGRAM_NAME: Usage: $PROGRAM_NAME [options] <bibfile> [<bibfile> ..]\n";
    print "Options:\n";
    print "  --debug               Do not remove temp files.\n";
    print "  --verbose             Be more verbose.\n";
    print "  --all                 Include all bibitems, not just those with www_selected set.\n";
    print "  --ext-css=<file>      Print CSS definitions to this file.\n";
    print "  --ext-js=<file>       Print JS definitions to this file.\n";
    print "  --css-template=<file> Use this template for the CSS file [tmpl.css].\n";
    print "  --js-template=<file>  Use this template for the JS file [tmpl.js].\n";
    print "  --template=<file>     Use this template for the main output [tmpl.html].\n";
    print "  --no-frame            Do not print the html header/body frame [sets a template option].\n";
    print "  --no-base-css         Do not output base CSS definitions [sets a template option].\n";
    print "  --help                Print this help.\n";
    exit(0);
};

if ($params->{'debug'}) {
    $File::Temp::KEEP_ALL = 1;
}

die("CSS template $params->{'css-template'} does not exist or is not a file.\n") unless (-f $params->{'css-template'});
die("JS template $params->{'js-template'} does not exist or is not a file.\n") unless (-f $params->{'js-template'});
die("Template $params->{'template'} does not exist or is not a file.\n") unless (-f $params->{'template'});

my $tmpdir;
my $origwd = getcwd();
END { chdir "/"; File::Path::remove_tree($tmpdir, {verbose => 0}) if defined ($tmpdir); }
$tmpdir = File::Temp->newdir('/tmp/b2h-XXXXXXX', CLEANUP => 0);

setup_bib($tmpdir);
chdir($tmpdir) or die ("Cannot chdir to $tmpdir.\n");
my $entries = prepare_entries($params);
chdir($origwd) or die ("Cannot chdir back to $origwd.\n");

my @publications = map { $entries->{$_} }
                       sort { - ($entries->{$a}->{'sort1'} cmp $entries->{$b}->{'sort1'}) ||
                                ($entries->{$a}->{'sort2'} cmp $entries->{$b}->{'sort2'})
                            }
                       keys %$entries;



my $external_css = defined $params->{'ext-css'};
my $external_js  = defined $params->{'ext-js'};

my $tmpl_data = {
    'publications'   => \@publications,
    'additional_css' => get_extra_css(),
    'external_css'   => $external_css,
    'external_js'    => $external_js,
    'no_frame'       => defined $params->{'no-frame'},
    'no_base_css'    => defined $params->{'no-base-css'},
};

for my $type (qw{css js}) {
    my $data;
    my $tt = Template->new( INCLUDE_PATH => dirname(abs_path($params->{$type.'-template'})) );
    $tt->process(basename($params->{$type.'-template'}), $tmpl_data, \$data) or die $tt->error(), "\n";
    $data =~ s/^\n*//;
    $data =~ s/\n\n*/\n/sg;

    $tmpl_data->{$type} = $data;
    if (defined $params->{'ext-'.$type}) {
        open (F, '>', $params->{'ext-'.$type}) or die "Cannot open $params->{'ext-'.$type}: $!\n";
        print F $data;
        close(F);
    };
};

my $out;
my $tt = Template->new( INCLUDE_PATH => dirname(abs_path($params->{'template'})) );
$tt->process(basename($params->{'template'}), $tmpl_data, \$out) or die $tt->error(), "\n";
$out =~ s/^\n*//;
$out =~ s/^\s*$//mg;
$out =~ s/^\s*</</mg;
$out =~ s/\n\n*/\n/sg;
print $out;
# vim:et:ts=4:sw=4:softtabstop=4:
